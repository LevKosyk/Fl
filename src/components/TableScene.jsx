import React, { useState, useEffect, useCallback, memo } from "react";
import "./styles/Table.css";
import { MapContainer, TileLayer, Marker, Popup, useMapEvents, useMap } from "react-leaflet";
import "leaflet/dist/leaflet.css";
import L from "leaflet";
import VideoScreen from "./VideoScreen";
import { Modal, Button, Container, Row, Col, Card, CloseButton } from 'react-bootstrap';
import 'bootstrap/dist/css/bootstrap.min.css';

const items = [
  { id: "chat", label: "–ü–µ—Ä–µ–ø–∏—Å–∫–∞", type: "chat", area: "div1", bg: "bg-yellow-500" },
  { id: "photos", label: "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", type: "photos", area: "div2", bg: "bg-pink-500" },
  { id: "map", label: "–ö–∞—Ä—Ç–∞", type: "map", area: "div3", bg: "bg-green-500" },
  { id: "letter", label: "–ü–∏—Å—å–º–æ", type: "letter", area: "div4", bg: "bg-indigo-500" },
  { id: "timeline", label: "–•—Ä–æ–Ω–æ–ª–æ–≥–∏—è", type: "timeline", area: "div5", bg: "bg-red-500" },
  { id: "text", label: '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å–∞–º–æ –ø–æ —Å–µ–±–µ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–Ω–∞—á–∏—Ç. –û–Ω–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∏—Å–ø—ã—Ç–∞–Ω–∏–µ–º: –ª–∏–±–æ —Ç—ã –ø–æ–Ω–∏–º–∞–µ—à—å, —á—Ç–æ –ª—é–±–æ–≤—å ‚Äî –ª–∏—à—å –ø—Ä–∏–≤—ã—á–∫–∞, –∏ —Ç–æ–≥–¥–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤—Å—ë —Ä—É—à–∏—Ç, –ª–∏–±–æ —Ç—ã –æ—Å–æ–∑–Ω–∞—ë—à—å, —á—Ç–æ –ª—é–±–æ–≤—å ‚Äî —ç—Ç–æ –≥–ª—É–±–∂–µ, —á–µ–º –ø—Ä–∏–≤—ã—á–∫–∞, –∏ —Ç–æ–≥–¥–∞ –Ω–∏–∫–∞–∫–∏–µ –∫–∏–ª–æ–º–µ—Ç—Ä—ã –Ω–µ –≤ —Å–∏–ª–∞—Ö –µ—ë —É–±–∏—Ç—å.', author: "–ú–∞—Ä–∫ –ê–≤—Ä–µ–ª–∏–π", year: "245 –¥–æ –Ω.—ç.", type: "citation", area: "div6", bg: "bg-blue-500" },
  { id: "text2", label: "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å—é—Ä–ø—Ä–∏–∑", description: "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–æ–µ-—á—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ...", type: "video", area: "div7", bg: "bg-purple-500" },
];

const markers = [
  { id: 1, position: [49.978944, 36.256861], text: "–ù–∞—à–µ –ø–µ—Ä–≤–æ–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ —Ñ–æ—Ç–æ", photo: "/assets/map/photo_2025-09-24_17-58-11.jpg" },
  { id: 2, position: [49.595257, 36.336346], text: "–ö—Ä–∞—Å–∞–≤—Ü—ã", photo: "/assets/map/photo_2025-09-24_17-58-11.jpg" },
  { id: 3, position: [49.594700, 36.336627], text: "–ï—â–µ –∫—Ä–∞—Å–∞–≤—Ü—ã", photo: "/assets/map/photo_2025-09-24_17-58-13.jpg" },
  { id: 4, position: [49.975804, 36.257101], text: "–û–∫—É–Ω—å", photo: "/assets/map/photo_2025-09-24_17-58-18.jpg" },
  { id: 5, position: [49.975504, 36.257101], text: "–ü–∏–∑–¥—å–æ–∂", photo: "/assets/map/photo_2025-09-24_17-58-32.jpg" },
  { id: 6, position: [49.940117, 36.275532], text: "–û—á–∞—Ä–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∏ —è", photo: "/assets/map/photo_2025-09-24_17-58-35.jpg" },
  { id: 7, position: [49.595000, 36.336234], text: "–ù–∞—à–µ –≤—Ç–æ—Ä–æ–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ —Ñ–æ—Ç–æ", photo: "/assets/map/photo_2025-09-24_17-58-22.jpg" },
  { id: 8, position: [49.999199, 36.224263], text: "–î–æ–≤–æ–ª—å–Ω–∞—è", photo: "../assets/map/photo_2025-09-24_17-58-45.jpg" },
  { id: 9, position: [49.976062, 36.255201], text: "–ú—ã –≤–ø–µ—Ä–≤—ã–µ –∫–∞–∫ –ø–∞—Ä–∞", photo: "/assets/map/photo_2025-09-24_17-58-55.jpg" },
  { id: 10, position: [49.594700, 36.336227], text: "–°–µ–º–µ–π–Ω–æ–µ —Ñ–æ—Ç–æ", photo: "/assets/map/photo_2025-09-24_17-59-03.jpg" },
  { id: 11, position: [50.444273, 30.431027], text: "–ü–µ—Ä—Å–∏–∫", photo: "/assets/map/photo_2025-09-24_18-06-47.jpg" },
  { id: 12, position: [50.444273, 30.431027], text: "–ì–æ—Ä–ª–æ–≤–æ–π", photo: "/assets/map/photo_2025-09-24_18-07-01.jpg" },
];

// Photo marker component for displaying thumbnails directly on the map
const PhotoMarker = ({ position, photo, text }) => {
  // Create a custom icon with the photo thumbnail
  const createPhotoIcon = (photoUrl, text) => {
    return L.divIcon({
      className: 'enhanced-photo-marker',
      html: `
        <div class="enhanced-marker-container">
          <div class="marker-glow"></div>
          <img 
            src="${photoUrl}" 
            alt="${text}"
            class="enhanced-marker-image"
            onerror="this.src='https://placehold.co/60x60/cccccc/ffffff?text=üì∑'"
          />
          <div class="marker-heart">‚ù§Ô∏è</div>
        </div>
      `,
      iconSize: [70, 70],
      iconAnchor: [35, 35]
    });
  };

  // Create the photo icon
  const photoUrl = `../assets/map/${photo.split('/').pop()}`;
  const photoIcon = createPhotoIcon(photoUrl, text);

  return (
    <Marker position={position} icon={photoIcon}>
      <Popup className="enhanced-popup">
        <div class="popup-container">
          <div class="popup-header">
            <h3 class="popup-title">{text}</h3>
          </div>
          <div class="popup-image-container">
            <img
              src={photoUrl}
              alt={text}
              class="popup-image"
              onError={(e) => {
                e.target.src = 'https://placehold.co/200x150/cccccc/ffffff?text=Photo+Not+Found';
              }}
            />
          </div>
          <div class="popup-footer">
          </div>
        </div>
      </Popup>
    </Marker>
  );
};

// Sample chat messages
const chatMessages = [
  { id: 1, author: "me", text: "–ò–¥–∏ —Å—é–¥–∞", time: "10:30" },
  { id: 2, author: "me", text: "–ß–∞–π –ø–æ–¥–∞–ª–∏", time: "10:31" },
  { id: 3, author: "she", text: "—Ö–∞–ª–æ", time: "10:32" },
  { id: 4, author: "she", text: "–≤ –æ–±—â–µ–º, –î–∞–≤–∏–¥ –Ω–µ —Ö–æ—á–µ—Ç, –æ–Ω –≤ –¥–µ–ø—Ä–µ—Å—Å–∏–∏", time: "10:33" },
  { id: 5, author: "me", text: "–º–µ–º–µ", time: "10:34" },
  { id: 6, author: "me", text: "–û–Ω —Ç–∞–∫–æ–π –ø–æ –∂–∏–∑–Ω–∏", time: "10:35" },
  { id: 7, author: "me", text: "–ù–µ –ø—Ä–∏–≤—ã–∫–∞–π", time: "10:36" },
  { id: 8, author: "me", text: "–î–∞, —è –µ–≥–æ –ø–æ–Ω–∏–º–∞—é", time: "10:37" },
  { id: 9, author: "she", text: "—Ç—É—Ç –ø—Ä–æ—Å—Ç–æ –∫–æ—à–º–∞—Ä", time: "10:38" },
  { id: 10, author: "she", text: "–≤ –∫–∞–∫–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–∏? –î–≤–∞ –∫—Ä—É–∂–æ—á–∫–∞ –¥–∞—à–µ –∏ –æ–Ω –Ω–∞ –Ω–µ–±–µ", time: "10:38" },
  { id: 11, author: "she", text: "—á–æ —Ç—É—Ç?", time: "10:38" },
  { id: 12, author: "she", text: "–æ–±—Å—É–∂–¥–∞–µ–º —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å", time: "10:38" },
  { id: 13, author: "system", text: "–ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –±—ã–ª–æ –Ω–∞–ø–∏—Å–∞–ª–æ –µ—â–µ +33 546 —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –º—ã –æ–∫–∞–∑–∞–ª–∏—Å—å –≤ —ç—Ç–æ–π —Ç–æ—á–∫–µ, –≥–¥–µ —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏–º—Å—è", time: "10:39" },
];


const photoData = [
  {
    id: "photo1",
    name: "–ù–∞—à –ø–µ—Ä–≤—ã–π –≤–µ—á–µ—Ä",
    src: "/assets/First.JPG",
    description: ""
  },
  {
    id: "photo2",
    name: "–û–¥–∏–Ω –∏–∑ –º–æ–º–µ–Ω—Ç–æ–≤ –≤–º–µ—Å—Ç–µ",
    src: "/assets/Fifs.JPG", 
    description: ""
  },
  {
    id: "photo3",
    name: "–ü–µ—Ä–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ. –ò–º–µ–Ω–Ω–æ —ç—Ç–æ —Ñ–æ—Ç–æ –∑–∞–ª–æ–∂–∏–ª–æ –Ω–∞—á–∞–ª–æ –≤—Å–µ–º—É",
    src: "/assets/Third.JPG",
    description: ""
  },
  {
    id: "photo4",
    name: "–ù–∞ –∑–∞–∫–∞—Ç–µ",
    src: "/assets/Six.JPG",
    description: ""
  },
  {
    id: "photo5",
    name: "–ü—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–ª—é —ç—Ç–æ –∑–¥–µ—Å—å",
    src: "/assets/abs.JPG",
    description: ""
  },
  {
    id: "photo6",
    name: "2.0",
    src: "/assets/Fours.JPG",
    description: ""
  },
  {
    id: "photo7",
    name: "–û—Å–æ–±–µ–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç",
    src: "/assets/photo_2025-10-05_16-58-10.jpg",
    description: ""
  },
  {
    id: "photo8",
    name: "–≠—Ç–æ—Ç –≤–∑–≥–ª—è–¥",
    src: "/assets/Second.PNG",
    description: ""
  },
  {
    id: "photo9",
    name: "–ö—Ä–∞—Å–∞–≤—Ü—ã",
    src: "/assets/photo_2025-10-05_16-58-10.jpg",
    description: ""
  }
];

const timelineEvents = [
  { id: 1, date: "26.06.2025", title: "–ù–∞—à–∞ –ø–µ—Ä–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞", description: "–í —ç—Ç–æ—Ç –¥–µ–Ω—å –º—ã –≤–ø–µ—Ä–≤—ã–µ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏—Å—å. –ò –≤—Å—ë –∏–º–µ–Ω–Ω–æ —Ç—É—Ç –Ω–∞—á–∞–ª–æ—Å—å!" },
  { id: 2, date: "29.06.2025", title: "–ü–µ—Ä–≤—ã–π –ø–æ—Ü–µ–ª—É–π", description: "–ü–æ–¥ –∑–≤–µ–∑–¥–∞–º–∏ –≤ –ø–∞—Ä–∫–µ. –Ø –ø–æ–º–Ω—é —ç—Ç–æ –∫–∞–∫ –≤—á–µ—Ä–∞." },
  { id: 3, date: "15.07.2025", title: "–ü–µ—Ä–≤—ã–µ —Ü–≤–µ—Ç—ã", description: "–≠—Ç–∏ –∫—Ä–∞—Å–∫–∏ —è –∑–∞–ø–æ–º–Ω—é –Ω–∞ –≤—Å—é –∂–∏–∑–Ω—å." },
  { id: 4, date: "11.08.2025", title: "–ü–µ—Ä–≤–∞—è –ø–æ–µ–∑–¥–∫–∞", description: "–ù–∞—à–∞ –ø–µ—Ä–≤–∞—è —Å–æ–≤–º–µ—Å—Ç–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞. –ò–º–µ–Ω–Ω–æ —Å –Ω–µ—ë –Ω–∞—á–∞–ª–∏—Å—å –º—ã." },
  { id: 5, date: "13.10.2025", title: "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", description: "–ù–∞—à –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤–º–µ—Å—Ç–µ. –Ø —Ç–µ–±—è –ª—é–±–ª—é." },
  { id: 6, date: "--.--.2026", title: "–ü–µ—Ä–≤–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ", description: "–≠—Ç–æ—Ç –¥–µ–Ω—å –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –Ω–∞—Å—Ç–∞–Ω–µ—Ç." },
];

const GridPage = memo(() => {
  const [activeItem, setActiveItem] = useState(null);
  const [isOpen, setIsOpen] = useState(false);
  const [modalType, setModalType] = useState(null); // Track which modal is open
  const onClose = useCallback(() => {
    setIsOpen(false);
    setModalType(null);
  }, []);
  const onOpen = useCallback(() => {
    setIsOpen(true);
    setModalType('chat');
  }, []);
  const [open, setOpen] = useState(false);
  const [showCitation, setShowCitation] = useState(false);
  const [showMap, setShowMap] = useState(false);
  const [showLetter, setShowLetter] = useState(false);

  const [visibleMessages, setVisibleMessages] = useState([]);
  const [index, setIndex] = useState(0);

  const [stack, setStack] = useState([photoData]);
  const current = stack[stack.length - 1];

  const openItem = useCallback((item) => {
    if (item.type === "folder") {
      setStack([...stack, item.children]);
    }
  }, [stack]);

  const goBack = useCallback(() => {
    if (stack.length > 1) {
      setStack(stack.slice(0, -1));
    } else {
      onClose();
    }
  }, [stack, onClose]);

  const [showVideo, setShowVideo] = useState(false);

  const [visitedItems, setVisitedItems] = useState(new Set());

  const allSections = ["chat", "photos", "map", "letter", "timeline"];

  const allSectionsVisited = allSections.every(section => visitedItems.has(section));

  const markAsVisited = useCallback((itemId) => {
    setVisitedItems(prev => new Set(prev).add(itemId));
  }, []);

  useEffect(() => {
    if (activeItem?.id === "chat" && isOpen) {
      setVisibleMessages([]);
      setIndex(0);

      let timeoutId;

      const showNextMessage = (currentIndex) => {
        if (currentIndex < chatMessages.length) {
          setVisibleMessages(prevMessages => {
            if (!prevMessages.some(msg => msg.id === chatMessages[currentIndex].id)) {
              console.log("Showing message:", chatMessages[currentIndex]);
              return [...prevMessages, chatMessages[currentIndex]];
            }
            return prevMessages;
          });

          timeoutId = setTimeout(() => {
            showNextMessage(currentIndex + 1);
          }, 2000);
        }
      };

      showNextMessage(0);

      return () => {
        if (timeoutId) clearTimeout(timeoutId);
      };
    }
  }, [isOpen, activeItem, chatMessages.length]);

  useEffect(() => {
    if (activeItem && activeItem.id) {
      markAsVisited(activeItem.id);
    }
  }, [activeItem, markAsVisited]);

  const renderItemContent = useCallback((item) => {
    switch (item.type) {
      case "text":
        return (
          <div className="grid-item-container">
            <div
              className="grid-item-text"
              style={{
                background: 'linear-gradient(270deg, #ff6ec4, #7873f5, #42e695, #ff6ec4)',
                backgroundSize: '800% 800%',
                WebkitBackgroundClip: 'text',
                WebkitTextFillColor: 'transparent',
                fontSize: '1rem',
                fontWeight: 'bold',
                lineHeight: 1.4,
                textShadow: '1px 1px 4px rgba(0,0,0,0.2)',
                animation: 'gradientShift 10s ease infinite',
              }}
            >
              {item.label}
            </div>
          </div>
        );
      case "citation":
        return (
          <div className="grid-item-container">
            <div className="grid-item-text">
              <div className="text-2xl mb-1">‚ùù</div>
              <blockquote className="italic text-xs mb-2 line-clamp-4">
                {item.label}
              </blockquote>
              <div className="text-right text-xs">
                <cite className="font-bold">‚Äî {item.author}</cite>
                <div>{item.year}</div>
              </div>
            </div>
          </div>
        );
      case "map":
        return (
          <div className="grid-item-container map-grid-item">
            <div className="grid-item-text">
              <div className="map-grid-icon mb-3">üó∫Ô∏è</div>
              <h3 className="text-lg font-bold mb-2 map-grid-title">–ö–∞—Ä—Ç–∞</h3>
              <p className="text-xs mb-3 map-grid-subtitle">–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å</p>
              <div className="map-stats-badge mt-3">
                <span className="badge bg-light text-dark">{markers.length} –º–µ—Å—Ç</span>
              </div>
            </div>
          </div>
        );
      case "timeline":
        return (
          <div className="grid-item-container">
            <div className="grid-item-text">
              <h3 className="text-lg font-bold mb-1">–•—Ä–æ–Ω–æ–ª–æ–≥–∏—è</h3>
              <p className="text-xs">–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å</p>
            </div>
          </div>
        );
      case "letter":
        return (
          <div className="grid-item-container letter-grid-item">
            <div className="grid-item-text">
              <div className="letter-grid-icon mb-3">üíå</div>
              <h3 className="text-lg font-bold mb-2 letter-grid-title">{item.label}</h3>
              <p className="text-xs mb-3 letter-grid-subtitle">–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–∏—Å—å–º–æ</p>
              <div className="heart-grid-icon pulse-animation">‚ù§Ô∏è</div>
            </div>
          </div>
        );
      case "photos":
        return (
          <div className="grid-item-container photo-grid-item">
            <div className="grid-item-text">
              <div className="photo-grid-icon mb-2">
                <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor" className="bi bi-images" viewBox="0 0 16 16">
                  <path d="M4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H4zm0 1h8a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1z" />
                  <path d="M6.5 4a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm7 0a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm-7 6a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm7 0a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z" />
                </svg>
              </div>
              <h3 className="text-lg font-bold mb-1">–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</h3>
              <p className="text-xs mb-2">–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å</p>
              <div className="photo-counter-badge">
                <span className="badge bg-light text-dark">{photoData.length} —Ñ–æ—Ç–æ</span>
              </div>
              <div className="photo-preview-grid mt-2">
                {photoData.slice(0, 3).map((photo, index) => (
                  <div key={index} className="photo-preview-thumb" style={{
                    backgroundImage: `url(${photo.src})`,
                    backgroundSize: 'cover',
                    backgroundPosition: 'center'
                  }} />
                ))}
              </div>
            </div>
          </div>
        );
      case "chat":
        return (
          <div className="grid-item-container chat-grid-item">
            <div className="grid-item-text">
              <div className="chat-indicators mb-3 d-flex justify-content-center gap-2">
                <div className="indicator online"></div>
                <div className="indicator away"></div>
                <div className="indicator busy"></div>
              </div>
              <h3 className="text-lg font-bold mb-2 chat-title">–ü–µ—Ä–µ–ø–∏—Å–∫–∞</h3>
              <p className="text-xs mb-3 chat-subtitle">–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å</p>
              <div className="chat-preview mb-3">
                <div className="message-bubble received mb-2">
                  <span className="message-text">–ü—Ä–∏–≤–µ—Ç! ‚ù§Ô∏è</span>
                </div>
                <div className="message-bubble sent">
                  <span className="message-text">–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? ‚ù§Ô∏è</span>
                </div>
              </div>
              <div className="chat-stats">
                <span className="badge bg-light text-dark px-3 py-2 rounded-pill">
                  <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" className="bi bi-chat-text me-1" viewBox="0 0 16 16">
                    <path d="M2.678 11.894a1 1 0 0 1 .287.801 10.97 10.97 0 0 1-.398 2c1.395-.323 2.247-.697 2.634-.893a1 1 0 0 1 .71-.074A8.06 8.06 0 0 0 8 14c3.996 0 7-2.807 7-6 0-3.192-3.004-6-7-6S1 4.808 1 8c0 1.468.617 2.83 1.678 3.894zm-.493 3.905a21.682 21.682 0 0 1-.713.129c-.2.032-.352-.176-.273-.362a9.68 9.68 0 0 0 .244-.637l.003-.01c.248-.72.45-1.548.524-2.319C.743 11.37 0 9.76 0 8c0-3.866 3.582-7 8-7s8 3.134 8 7-3.582 7-8 7a9.06 9.06 0 0 1-2.347-.306c-.52.263-1.639.742-3.468 1.105z" />
                    <path d="M4 5.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zM4 8a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7A.5.5 0 0 1 4 8zm0 2.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5z" />
                  </svg>
                  99+ —Å–æ–æ–±—â–µ–Ω–∏–π
                </span>
              </div>
            </div>
          </div>
        );
      case "video":
        return (
          <div className="grid-item-container">

            {allSectionsVisited && (
              <div className="grid-item-text">
                <h3 className="text-lg font-bold mb-1">{item.label}</h3>
                <p className="text-xs mb-2">{item.description}</p>
                <button
                  className="btn btn-outline-light btn-sm rounded-pill px-3 py-1"
                  onClick={(e) => {
                    e.stopPropagation();
                    setShowVideo(true);
                  }}
                >
                  –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ ‚ù§Ô∏è
                </button>
              </div>
            )}

          </div>
        );
      default:
        return (
          <div className="grid-item-container">
            <div className="grid-item-text">
              <span className="text-center">{item.label}</span>
            </div>
          </div>
        );
    }
  }, [open, showVideo]);

  // Consolidate all modal close functions
  const closeModal = useCallback(() => {
    setActiveItem(null);
    setIsOpen(false);
    setShowCitation(false);
    setShowMap(false);
    setShowLetter(false);
    setShowVideo(false);
    setModalType(null);
  }, []);

  return (
    <div className="relative bg-gray-100 overflow-hidden">
      {/* GRID */}
      {!modalType && (
        <div className="parent" style={{ width: '100vw', height: '100vh' }}>
          {items.map((item) => (
            <div
              key={item.id}
              className={`${item.area} flex items-center justify-center 
      text-white font-semibold rounded-xl cursor-pointer transition-all duration-300`}
              style={{ backgroundColor: item.bg }}
              onClick={(e) => {
                e.stopPropagation();
                // Close any open modals first
                closeModal();

                // Handle each item type with its specific modal state
                switch (item.type) {
                  case "letter":
                    setShowLetter(true);
                    setActiveItem(item); // Add this line to ensure markAsVisited is called
                    setModalType('letter');
                    break;
                  case "map":
                    setShowMap(true);
                    setActiveItem(item); // Add this line to ensure markAsVisited is called
                    setModalType('map');
                    break;
                  case "citation":
                    setShowCitation(true);
                    setActiveItem(item); // Add this line to ensure markAsVisited is called
                    setModalType('citation');
                    break;
                  case "video":
                    if (item.id === "text2") {
                      // Special video item
                      setActiveItem(item);
                      setModalType('video');
                    } else {
                      setShowVideo(true);
                      setActiveItem(item); // Add this line to ensure markAsVisited is called
                      setModalType('video');
                    }
                    break;
                  default:
                    // For chat, photos, timeline and other items
                    setActiveItem(item);
                    setModalType(item.type);
                    if (item.id === "chat") {
                      onOpen();
                    }
                    break;
                }
              }}
            >
              {renderItemContent(item)}
            </div>
          ))}

          {/* Special button that appears after visiting all sections */}
          <div
            className={`div7 flex items-center justify-center text-white font-semibold rounded-xl cursor-pointer transition-all duration-300 ${allSectionsVisited ? 'special-surprise-available' : 'opacity-75'
              }`}
            style={{ gridArea: '1 / 3 / 3 / 4' }}
            onClick={(e) => {
              e.stopPropagation();
              if (allSectionsVisited) {
                // Close any open modals first
                closeModal();

                // Find the video item and activate it
                const videoItem = items.find(item => item.type === "video");
                if (videoItem) {
                  setActiveItem(videoItem);
                  setModalType('video');
                  setShowVideo(true); // Automatically show the video when opening the surprise
                }
              }
            }}
          >
            <div className="grid-item-container">
              <div className="grid-item-text">
                <h3 className="text-lg font-bold mb-1">üéâ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å—é—Ä–ø—Ä–∏–∑</h3>
                {allSectionsVisited ? (
                  <>
                    <p className="text-xs mb-2">–í—ã –ø–æ—Å–µ—Ç–∏–ª–∏ –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã</p>
                  </>
                ) : (
                  <>
                    <p className="text-xs mb-2">–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ</p>
                    <div className="lock-icon mb-2">üîí</div>
                    <p className="text-xs">–ü–æ—Å–µ—Ç–∏—Ç–µ –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã</p>
                    <div className="text-xs mt-2 opacity-75">
                      {allSections.filter(section => !visitedItems.has(section)).length} –æ—Å—Ç–∞–ª–æ—Å—å
                    </div>
                  </>
                )}
              </div>
            </div>
          </div>
        </div>
      )}

      {/* FULLSCREEN VIDEO MODAL - Bootstrap Modal */}
      <Modal
        show={modalType === "video" && activeItem?.type === "video"}
        onHide={closeModal}
        fullscreen={true}
        backdrop="static"
        keyboard={false}
        className="citation-modal"
        backdropClassName="bg-dark"
      >
        <Modal.Header className="citation-header" closeButton>
          <Modal.Title className="text-white w-100 text-center">
            <div className="citation-icon">üé¨</div>
            <div className="citation-title">–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å—é—Ä–ø—Ä–∏–∑</div>
          </Modal.Title>
        </Modal.Header>
        <Modal.Body className="citation-body p-0">
          <div className="citation-content h-100 d-flex align-items-center justify-content-center">
            {showVideo ? (
              <VideoScreen
                src="/assets/IMG_2424.mp4"
                onFinish={() => {
                  setShowVideo(false);
                  setModalType(null);
                }}
              />
            ) : (
              <div className="text-center text-white w-100">
                <div className="display-1 mb-4">‚ù§Ô∏è</div>
                <h2 className="mb-3">–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ç–≤–æ–µ –≤–∏–¥–µ–æ</h2>
                <p className="mb-4 lead">–≠—Ç–æ –º–µ—Å—Ç–æ –¥–ª—è —Ç–≤–æ–µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ-—Å—é—Ä–ø—Ä–∏–∑–∞!</p>
                <Button
                  variant="primary"
                  size="lg"
                  onClick={() => setShowVideo(true)}
                  className="mt-3 rounded-pill px-4"
                >
                  –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ ‚ù§Ô∏è
                </Button>
              </div>
            )}
          </div>
        </Modal.Body>
        <Modal.Footer className="citation-footer">
          <Button
            variant="outline-light"
            onClick={closeModal}
            className="rounded-pill px-4"
          >
            –ó–∞–∫—Ä—ã—Ç—å
          </Button>
        </Modal.Footer>
      </Modal>

      {/* VIDEO SCREEN - Fullscreen */}
      {showVideo && !activeItem && (
        <VideoScreen
          src="/assets/IMG_2424.mp4"
          onFinish={() => {
            setShowVideo(false);
            setModalType(null);
          }}
        />
      )}

      <Modal
        show={modalType === "citation"}
        onHide={closeModal}
        centered
        size="lg"
        backdropClassName="bg-dark bg-opacity-50"
        className="citation-modal"
      >
        <Modal.Header className="bg-gradient citation-header" closeButton>
          <Modal.Title className="text-white w-100 text-center">
            <div className="citation-icon">‚ùù</div>
            <div className="citation-title">–í–µ—á–Ω–∞—è –º—É–¥—Ä–æ—Å—Ç—å</div>
          </Modal.Title>
        </Modal.Header>
        <Modal.Body className="citation-body">
          <div className="citation-content">
            <blockquote className="citation-text">
              {items.find(item => item.id === "text")?.label}
            </blockquote>
            <div className="citation-author">
              <div className="author-name">‚Äî {items.find(item => item.id === "text")?.author}</div>
              <div className="author-era">{items.find(item => item.id === "text")?.year}</div>
            </div>
            <div className="citation-decoration">
              <div className="decoration-element"></div>
              <div className="heart-icon">‚ù§Ô∏è</div>
              <div className="decoration-element"></div>
            </div>
          </div>
        </Modal.Body>
        <Modal.Footer className="citation-footer">
          <Button
            variant="outline-light"
            onClick={closeModal}
            className="rounded-pill px-4"
          >
            –ó–∞–∫—Ä—ã—Ç—å
          </Button>
        </Modal.Footer>
      </Modal>

      {/* LETTER MODAL - Bootstrap Modal */}
      <Modal
        show={modalType === "letter" && showLetter}
        onHide={closeModal}
        size="lg"
        centered
        backdropClassName="bg-dark bg-opacity-50"
        className="citation-modal"
      >
        <Modal.Header className="letter-modal-header" closeButton>
          <Modal.Title className="text-white w-100 text-center">
            <div className="letter-modal-icon">üíå</div>
            <div className="letter-modal-title">–õ—é–±–∏–º–∞—è, –¥–ª—è —Ç–µ–±—è</div>
            <div className="letter-modal-subtitle mt-2">–° –ª—é–±–æ–≤—å—é –æ—Ç –≤—Å–µ–π –¥—É—à–∏</div>
          </Modal.Title>
        </Modal.Header>
        <Modal.Body className="letter-modal-body">
          <div className="letter-modal-content">
            <div className="letter-paper">
              <div className="letter-header">
                <h2 className="letter-title">–ú–æ—ë —Å–∞–º–æ–µ –¥–æ—Ä–æ–≥–æ–µ –ø–∏—Å—å–º–æ</h2>
                <div className="letter-date">{new Date().toLocaleDateString('ru-RU', { year: 'numeric', month: 'long', day: 'numeric' })}</div>
              </div>
              <div className="letter-body">
                <p className="letter-salutation">–ú–æ—è —Å–∞–º–∞—è —Ä–æ–¥–Ω–∞—è –∏ –ª—é–±–∏–º–∞—è,</p>

                <p>–ü—Ä–∏–≤–µ—Ç. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –¥–Ω–µ–º –≤–∞—Ä–µ–Ω—å—è, –æ–π –Ω–µ—Ç, —Å –¥–Ω–µ–º –∂–µ–ª–µ–Ω—å—è, –Ω–µ –Ω–µ, —Å –¥–Ω–µ–º –¥–∞–≤–ª–µ–Ω–∏—è, –Ω—É —ç—Ç–æ –ø—Ä–æ —Ç–µ–±—è –Ω—É —Ç–æ–∂–µ –Ω–µ—Ç, –∫–∞—Ä–æ—á–µ —Å —á–µ–º —Ç–æ, —è –¥—É–º–∞—é, —á—Ç–æ —è–≤–Ω–æ –Ω–µ –±—É–¥—É –ø–µ—Ä–≤—ã–π —Ç–∞–∫ –∫–∞–∫ –¥–ª—è –º–µ–Ω—è –≤—Ä–µ–º—è —É–∂–µ —Å–ø–∞—Ç—å, –Ω–æ –≤—Å–µ –∂–µ, –Ω–∞–¥–µ—é—Å—å —Ç—ã —ç—Ç–æ —á–∏—Ç–∞–µ—à—å –Ω–µ –≤ 8 —É—Ç—Ä–∞, –ø–æ—Ç–æ–º—É —á—Ç–æ —è–≤–Ω–æ —è –Ω–∞—Å—Ç–æ–ª—å–∫–æ –µ–±–∞–Ω—É—Ç—ã —á—Ç–æ –º–æ–≥ –≤—Å–µ –ø—Ä–æ—Å–ø–∞—Ç—å –∏  –ø–æ—Ç–æ–º —Ä–∞–Ω–æ –≤—Å—Ç–∞—Ç—å, —Ç–∞–∫ –≤–æ—Ç –µ—Å–ª–∏ - –¥–∞, —Ç–æ —Å–æ–≤–µ—Ç—É—é —Å—Ç–∞–≤–∏—Ç—å —á–∞–π–Ω–∏–∫ —Ç–∞–∫ –∫–∞–∫ —è–≤–Ω–æ —è —É–∂–µ –±–µ–≥—É –∫ —Ç–µ–±–µ, –∞ –º–æ–∂–µ—Ç —É–∂–µ –∏ –ø–æ–¥ –¥–≤–µ—Ä—å—é, –ø—Ä–æ–≤–µ—Ä—å –Ω–µ –ª–∏–∂–µ—Ç –ª–∏ —Ç–∞–º –∫–∞–∫–æ–π-—Ç–æ –±–æ–º–∂(—è).
                  –¢–∞–∫ –∫ —á–µ–º—É —ç—Ç–æ —è, —Ö–æ—á—É —Å–∫–∞–∑–∞—Ç—å —á—Ç–æ —Å–∫–æ—Ä–æ —Ç–µ–±–µ —Ç–∞–Ω–æ–º–µ—Ç—Ä –Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è, –Ω—É –ø—Ä–æ—Å—Ç–æ —Å–æ–º–Ω–µ–≤–∞—é—Å—å —á—Ç–æ —Ç–∞–º –±—É–¥–µ—Ç —Ç–∞–∫–∏–µ —Ü–∏—Ñ—Ä—ã –ø–æ–∫–∞ —Ç—ã –±—É–¥–µ—à—å —É—á–∏—Ç—å—Å—è –≤ –º–µ–Ω–µ. –•–æ—á–µ—Ç—Å—è –ø–æ–∂–µ–ª–∞—Ç—å –∑–¥–æ—Ä–æ–≤—å—è, –∞ —Ç–æ –∫–∞–∫, —É –Ω–∞—Å –æ–±—â–µ–≥–æ –±–µ–∑ —Å–µ–∫—Å–∞ –Ω–µ –±—É–¥–µ—Ç, –Ω–∏ –¥–µ—Ç–µ–π, –Ω–∏ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –∂–∏–∑–Ω–∏, —Ç–∞–∫ —á—Ç–æ –∫—Ä–µ–ø–∏—Å—å. –¢–∞–∫ –∂–µ —Ö–æ—á–µ—Ç—Å—è –ø–æ–∂–µ–ª–∞—Ç—å –º–µ–Ω—å—à–µ —á–ª–µ–Ω–æ–≤, –∏ –º–µ–Ω—å—à–µ —Ç–∞–∫ –∏ –ø—Ä–æ—Å—Ç–æ –ø–æ –º–µ–Ω—å—à–µ, –∞ —Ç–æ –Ω–µ –≥–æ–∂–µ –¥–∞–º–µ –Ω–∞ –Ω–∏—Ö —Å–º–æ—Ç—Ä–µ—Ç—å(–≤–æ–∑–º–æ–∂–Ω–æ —É —á—É—Ç—å –∑–∞–≤–∏–¥—É—é, –Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ, –≥–¥–µ –º–æ–∏). –ò –Ω–∞ –¥–æ–±–∞–≤–∫—É —Ö–æ—á–µ—Ç—Å—è —Å–∫–∞—Ç—å —á—Ç–æ —Ç—ã –º–æ—è —Å–∞–º–∞—è –ª—é–±–∏–º–∞—è –∏ —Å–∞–º–∞—è –∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ –≤ –º–∏—Ä–µ. –Ø –Ω–∞–¥–µ—é—Å—å —Ç—ã –¥–∞–ª—å—à–µ –∫–∞–π—Ñ–∞–Ω–µ—à—å, –Ω—É –∞ –ø–æ–∫–∞–º–µ—Å—Ç—å —è –ø—Ä–æ—â–∞—é—Å—å —Å —Ç–æ–±–æ–π </p>


                <p className="letter-signature">–° –±–µ–∑—É–º–Ω–æ–π –ª—é–±–æ–≤—å—é,<br /><span className="signature-name">–õ–µ–≤–∞</span></p>
                <div className="text-center mt-4">
                  <p style={{ fontSize: '2rem' }} className="heart-icon-letter">‚ù§Ô∏è</p>
                  <p className="mt-3" style={{ fontStyle: 'italic', color: '#d44d5c' }}>P.S. –ù–µ –∑–∞–±—É–¥—å —É–¥–∏–≤–∏—Ç—å—Å—è, –∫–æ–≥–¥–∞ —É–≤–∏–¥–∏—à—å –±—Ä–∞—Å–ª–µ—Ç ‚Äî –æ–Ω —Å–∏–º–≤–æ–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—à–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ "—è —Ç–µ–±—è –ª—é–±–ª—é"</p>
                </div>
              </div>
            </div>
          </div>
        </Modal.Body>
        <Modal.Footer className="letter-modal-footer">
          <Button
            variant="outline-light"
            onClick={closeModal}
            className="rounded-pill px-4"
          >
            –°–≤–µ—Ä–Ω—É—Ç—å –ø–∏—Å—å–º–æ
          </Button>
        </Modal.Footer>
      </Modal>

      {/* MAP MODAL - Bootstrap Modal */}
      <Modal
        show={modalType === "map"}
        onHide={closeModal}
        size="xl"
        centered
        backdropClassName="bg-dark bg-opacity-70"
        className="map-modal citation-modal"
      >
        <Modal.Header className="map-header citation-header" closeButton>
          <Modal.Title className="text-white w-100 text-center">
            <div className="map-icon citation-icon">üó∫Ô∏è</div>
            <div className="map-title citation-title">–ù–∞—à–∞ –∫–∞—Ä—Ç–∞</div>
            <div className="map-subtitle mt-2">–ú–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –∑–∞–ø–æ–º–Ω–∏–ª–∏ –≤–º–µ—Å—Ç–µ</div>
          </Modal.Title>
        </Modal.Header>
        <Modal.Body className="map-body citation-body">
          <div className="map-content citation-content">
            <div className="map-container" style={{ height: "75vh", width: "100%", borderRadius: "15px", overflow: "hidden", boxShadow: "0 10px 30px rgba(0,0,0,0.3)" }}>
              <MapContainer
                center={[49, 32]}
                zoom={6}
                scrollWheelZoom={true}
                style={{ height: "100%", width: "100%" }}
                zoomControl={true}
                attributionControl={false}
              >
                <TileLayer
                  attribution='&copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a>'
                  url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
                />
                {/* Photo thumbnails displayed directly on the map */}
                {markers.map((m) => (
                  <PhotoMarker
                    key={m.id}
                    position={m.position}
                    photo={m.photo}
                    text={m.text}
                  />
                ))}
                {/* Add a decorative compass */}
                <div className="map-compass">üß≠</div>
              </MapContainer>
            </div>
          </div>
        </Modal.Body>
        <Modal.Footer className="map-footer citation-footer">
          <Button
            variant="outline-light"
            onClick={closeModal}
            className="rounded-pill px-4 map-close-btn"
          >
            –ó–∞–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É
          </Button>
        </Modal.Footer>
      </Modal>

      <Modal
        show={modalType === "timeline"}
        onHide={closeModal}
        size="lg"
        centered
        backdropClassName="bg-dark bg-opacity-50"
        className="citation-modal"
      >
        <Modal.Header className="citation-header" closeButton>
          <Modal.Title className="text-white w-100 text-center">
            <div className="citation-icon">‚è≥</div>
            <div className="citation-title">–ù–∞—à–∞ –•—Ä–æ–Ω–æ–ª–æ–≥–∏—è</div>
            <div className="citation-subtitle mt-2">–ò—Å—Ç–æ—Ä–∏—è –Ω–∞—à–µ–π –ª—é–±–≤–∏</div>
          </Modal.Title>
        </Modal.Header>
        <Modal.Body className="citation-body">
          <div className="citation-content">
            <div className="timeline-container" style={{ maxHeight: '70vh', overflowY: 'auto' }}>
              <div className="position-relative">
                {/* Timeline line */}
                <div className="position-absolute start-0 top-0 bottom-0 w-1 bg-danger bg-opacity-25 translate-middle-x" style={{ backgroundColor: 'black', marginLeft: '16px' }}></div>

                {/* Timeline events */}
                {timelineEvents.map((event, index) => (
                  <div key={event.id} className="d-flex mb-4 timeline-event-item">
                    <div className="d-flex flex-column align-items-center me-3 timeline-event-marker">
                      <div className="d-flex align-items-center justify-content-center rounded-circle bg-danger shadow timeline-event-number"
                        style={{ color: 'black', width: '45px', height: '45px', fontSize: '1.2rem', fontWeight: 'bold' }}>
                        {index + 1}
                      </div>
                    </div>
                    <Card className="flex-grow-1 border-0 shadow-sm timeline-event-card">
                      <Card.Body className="py-3">
                        <div className="d-flex justify-content-between align-items-start mb-2">
                          <Card.Title className="mb-0 timeline-event-title" style={{ color: 'black' }}>{event.title}</Card.Title>
                          <span className="badge bg-danger bg-opacity-10 timeline-event-date" style={{ color: 'black' }}>
                            {event.date}
                          </span>
                        </div>
                        <Card.Text className="mb-0 timeline-event-description" style={{ color: 'black' }}>{event.description}</Card.Text>
                      </Card.Body>
                    </Card>
                  </div>
                ))}
              </div>
              {/* Add decorative elements similar to citation modal */}
              <div className="citation-decoration mt-4">
                <div className="decoration-element"></div>
                <div className="heart-icon">‚ù§Ô∏è</div>
                <div className="decoration-element"></div>
              </div>
            </div>
          </div>
        </Modal.Body>
        <Modal.Footer className="citation-footer">
          <Button
            variant="outline-light"
            onClick={closeModal}
            className="rounded-pill px-4"
          >
            –ó–∞–∫—Ä—ã—Ç—å
          </Button>
        </Modal.Footer>
      </Modal>

      {/* CHAT MODAL - Bootstrap Modal */}
      <Modal
        show={modalType === "chat"}
        onHide={closeModal}
        size="lg"
        centered
        backdropClassName="bg-dark bg-opacity-50"
        className="enhanced-chat-modal"
      >
        <Modal.Header className="chat-header" closeButton>
          <div className="chat-header-content w-100">
            <div className="d-flex align-items-center justify-content-between">
              <div className="d-flex align-items-center">
                <div className="chat-avatar sent me-3">
                  <span className="avatar-initials">–õ</span>
                </div>
                <div>
                  <h2 className="chat-username mb-0">–õ—é–±–∏–º–∞—è</h2>
                  <p className="chat-status mb-0">–û–Ω–ª–∞–π–Ω</p>
                </div>
              </div>
              <div className="chat-icon">üí¨</div>
            </div>
          </div>
        </Modal.Header>
        <Modal.Body className="chat-modal-body p-0">
          <div className="d-flex flex-column h-100">
            {/* Chat messages container */}
            <div className="flex-grow-1 overflow-auto p-3 chat-messages-container" style={{ maxHeight: '60vh' }}>
              {visibleMessages.map((msg, idx) => (
                <div
                  key={msg.id}
                  className={`mb-3 chat-message ${msg.author === "system" ? "text-center" : ""}`}
                >
                  {msg.author === "system" ? (
                    // System message
                    <div className="d-inline-block p-2 rounded system-message">
                      {msg.text}
                    </div>
                  ) : (
                    // Regular chat message
                    <div
                      className={`d-flex ${msg.author === "me" ? "justify-content-end" : "justify-content-start"}`}
                    >
                      {msg.author === "she" && (
                        <div className="avatar me-2 d-flex align-items-end">
                          <div className="chat-avatar received">
                            <span className="avatar-initials">–õ</span>
                          </div>
                        </div>
                      )}
                      <div
                        className={`p-3 rounded chat-bubble ${msg.author === "me"
                          ? "sent"
                          : "received"
                          }`}
                      >
                        <div className="message-text">{msg.text}</div>
                        <div className={`text-end small mt-1 message-time ${msg.author === "me" ? "sent-time" : "received-time"
                          }`}>
                          {msg.time}
                        </div>
                      </div>
                      {msg.author === "me" && (
                        <div className="avatar ms-2 d-flex align-items-end">
                          <div className="chat-avatar sent">
                            <span className="avatar-initials">–Ø</span>
                          </div>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              ))}
            </div>

            {/* Chat input area */}
            <div className="chat-input-area">
              <div className="d-flex align-items-center">
                <input
                  type="text"
                  className="form-control chat-input flex-grow-1"
                  placeholder="–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                  onKeyPress={(e) => {
                    if (e.key === 'Enter') {
                      // Simulate sending a message
                      console.log("Message sent");
                    }
                  }}
                />
                <button className="btn btn-primary send-button d-flex align-items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" className="bi bi-send" viewBox="0 0 16 16">
                    <path d="M15.854.146a.5.5 0 0 1 .11.54l-5.819 14.547a.75.75 0 0 1-1.329.124l-3.178-4.995L.643 7.184a.75.75 0 0 1 .124-1.33L15.314.037a.5.5 0 0 1 .54.11ZM6.636 10.07l2.761 4.338L14.13 2.576 6.636 10.07Zm6.787-8.201L1.591 6.602l4.339 2.76 7.494-7.493Z" />
                  </svg>
                </button>
              </div>
            </div>
          </div>
        </Modal.Body>
        <Modal.Footer className="citation-footer">
          <Button
            variant="outline-light"
            onClick={closeModal}
            className="rounded-pill px-4"
          >
            –ó–∞–∫—Ä—ã—Ç—å
          </Button>
        </Modal.Footer>
      </Modal>

      {/* PHOTO EXPLORER - Bootstrap Modal */}
      <Modal
        show={modalType === "photos"}
        onHide={closeModal}
        size="xl"
        centered
        backdropClassName="bg-dark bg-opacity-50"
        className="citation-modal photo-modal"
      >
        <Modal.Header className="photo-modal-header" closeButton>
          <Modal.Title className="text-white w-100 text-center">
            <div className="photo-modal-icon">üì∏</div>
            <div className="photo-modal-title">–ù–∞—à –§–æ—Ç–æ–∞–ª—å–±–æ–º</div>
          </Modal.Title>
        </Modal.Header>
        <Modal.Body className="photo-modal-body">
          <div className="citation-content">
            <div className="photo-gallery-header mb-4">
              <h2 className="photo-gallery-title">–ù–∞—à –§–æ—Ç–æ–∞–ª—å–±–æ–º</h2>
              <p className="text-white mb-3 opacity-75">–í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Å–æ–∑–¥–∞–ª–∏ –≤–º–µ—Å—Ç–µ</p>
              <div className="photo-gallery-stats">
                <span className="photo-count-badge">
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" className="bi bi-images" viewBox="0 0 16 16">
                    <path d="M4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H4zm0 1h8a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1z" />
                    <path d="M6.5 4a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm7 0a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm-7 6a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm7 0a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z" />
                  </svg>
                  {photoData.length} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                </span>
              </div>
            </div>

            <div className="photo-gallery">
              <Row>
                {photoData.map((photo, index) => (
                  <Col md={4} className="mb-4" key={photo.id}>
                    <Card className="h-100 shadow-sm photo-card">
                      <div className="photo-card-image-wrapper">
                        <Card.Img
                          variant="top"
                          src={photo.src}
                          alt={photo.name}
                          className="photo-card-img"
                          onError={(e) => {
                            e.target.src = 'https://placehold.co/300x250/cccccc/ffffff?text=–§–æ—Ç–æ+–Ω–µ+–Ω–∞–π–¥–µ–Ω–æ';
                          }}
                        />
                      </div>
                      <Card.Body className="d-flex flex-column">
                        <Card.Title className="photo-card-title">{photo.name}</Card.Title>
                        <Card.Text className="flex-grow-1 photo-card-description">{photo.description}</Card.Text>
                        <div className="d-flex justify-content-between align-items-center mt-auto">
                          <small className="text-white opacity-75">–§–æ—Ç–æ #{index + 1}</small>
                        </div>
                      </Card.Body>
                    </Card>
                  </Col>
                ))}
              </Row>
            </div>
          </div>
        </Modal.Body>
        <Modal.Footer className="photo-modal-footer">
          <div className="photo-modal-footer-content">
            <div className="photo-stats">
              <span className="text-white opacity-75">
                <span className="fw-bold">{photoData.length}</span> —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –∞–ª—å–±–æ–º–µ
              </span>
            </div>
            <div className="photo-modal-actions">
              <Button
                variant="outline-light"
                className="me-2 rounded-pill px-4 photo-action-btn"
                onClick={closeModal}
              >
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" className="bi bi-x-lg" viewBox="0 0 16 16">
                  <path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.146 5.147a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8 2.146 2.854Z" />
                </svg>
                –ó–∞–∫—Ä—ã—Ç—å
              </Button>
            </div>
          </div>
        </Modal.Footer>
      </Modal>


    </div>
  );
});

export default GridPage;